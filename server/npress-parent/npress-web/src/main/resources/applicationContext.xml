<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

        <context:component-scan base-package="com.npress.web.dao"/>
        <context:component-scan base-package="com.npress.web.service"/>

        <!-- 读取mysql jdbc的配置-->
        <!--<context:property-placeholder location="classpath:jdbc.properties"/>   也能获取属性文件-->
        <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="locations" value="classpath:jdbc.properties" />
        </bean>
        <!--  配置DBCP2数据源  -->
        <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
              destroy-method="close">
            <property name="driverClassName" value="${jdbc.driverClassName}" />
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <!-- 连接初始值，连接池启动时创建的连接数量的初始值  默认值是0 -->
            <property name="initialSize" value="${jdbc.initialSize}" />
            <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请  默认值是0 -->
            <property name="minIdle" value="${jdbc.minIdle}" />
            <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制  默认值是8 -->
            <property name="maxIdle" value="${jdbc.maxIdle}" />
            <property name="maxTotal" value="${jdbc.maxTotal}"/>
            <property name="maxWaitMillis" value="${jdbc.maxWaitMillis}"/>
        </bean>

        <!--  配置Jdbc模板   -->
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource"/>
        <!--  配置事务管理器  -->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>

        <!--  通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务  -->
        <aop:config proxy-target-class="true">
            <aop:pointcut id="serviceMethod" expression=" execution(* com.npress.web.service..*(..))"/>
            <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
        </aop:config>
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="*"/>
            </tx:attributes>
        </tx:advice>

        <!-- myBatis -->
        <!--<bean id="sqlSessionFactory"-->
            <!--class="org.mybatis.spring.SqlSessionFactoryBean"-->
            <!--p:dataSource-ref="dataSource"-->
            <!--p:configLocation="classpath:myBatisConfig.xml"/>-->

        <!-- myBatis -->
        <bean id="sqlSessionFactory"
              class="org.mybatis.spring.SqlSessionFactoryBean"
              p:dataSource-ref="dataSource"
              p:configLocation="classpath:myBatisConfig.xml"
              p:mapperLocations="classpath:com/npress/web/domain/**/*.xml"/>

        <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg ref="sqlSessionFactory"/>
        </bean>
</beans>